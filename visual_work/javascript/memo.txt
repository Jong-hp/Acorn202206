변수를 만들때는 미리 약속된 예약어 let 을 사용한다.(let num=10;)
let 다음에는 변수의 이름을 정한다.
= 의 우측에 있는 값이 = 의 좌측에 들어간다(대입된다)
한줄의 끝에는 ; 을 작성한다.

연산을 한 그 위치는 결과 값으로 바뀐다(대체된다.)

{ key:value, key2:value2, ... }


변수 => 값을 저장 할 수 있는 이름 지어진 기억 공간
(let a = 10;)

변수 => 값을 필요한 시점에 바꿀수도 있다.

한번 선언한 변수는 다시 선언하면 안된다.

object type{} 이 필요한 이유는 ? 여러개의 데이터를 하나의 묶음으로 관리하고자 할떄 사용한다.


let b = "Park";

let c = true;

- object, array, function type 은 heap 영역에 만들어진다.( 사물함 영역에 만들어 진다.)
-사물함은 사물함 번호로 관리가 된다.

alert(x)
console.log(x)
let names=[];
names.push(x)
names.

1+1 - 산술연산
"글자"+1 연결연산
let num1=10;, 10.1; - number type

let myName='park';, "park";, `park`; - string type

let isRun=true; - boolean type
let isWait=false;

let obj={}; - objeck type(순서가 중요치 않고 관리가 편한 타입)
ex) let mem={num1 + num2};

let arr=[]; - array type (순서가 중요한 타입) ex) let nums=[10, 20 ,30, 40, ..]

let f = function(){javascripts}; - function type (일괄 실행시킬 파일을 모아놓기위함)
function(){}; = ()=>{};

console.log; (참조)
console.log(); (콜)

confirm()
prompt("입력");

global영역에서 만든함수는 전역함수
local영역에서 만든함수는 지역함수

function 함수

-특정 시점에 일괄 실행할 javascripts 들을 모아 놓을수 있다.
-함수를 호출(call) 하면 함수 안쪽으로 실행 순서가 들어간다.
-함수는 언제 종료되는가?
    함수 안에 있는 모든 javascripts를 수행하고 더 이상 수행할 javascripts가 없을때
    수행하다가 return 이라는 예약어를 만나도 종료가 된다.

Math.random() => 0 이상 1 미만의 랜덤한 실수
Math.random()*10 => 0 이상 10 미만의 랜덤한 실수
Math.floor(Math.random()*10) => 0 이상 9 이하의 랜덤한 정수